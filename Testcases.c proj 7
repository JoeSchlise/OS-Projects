#include <xinu.h>

/* This fake page table will allow you to test your printPageTable function
 * without having paging completely working.
 */
pgtbl createFakeTable(void){
        pgtbl root = pgalloc();
        pgtbl lvl1 = pgalloc();
        pgtbl lvl0 = pgalloc();

        volatile ulong *pte = &(root[5]);
        *pte = PA2PTE(lvl1) | PTE_V;

        ulong *lvl1pte = &(lvl1[145]);
        *lvl1pte = PA2PTE(lvl0) | PTE_V;

        ulong *lvl0pte = &(lvl0[343]);
        *lvl0pte = PA2PTE(0x1000) | PTE_W | PTE_R | PTE_V;

        ulong *lvl0pte1 = &(lvl0[120]);
        *lvl0pte1 = PA2PTE(0x4000) | PTE_X | PTE_R | PTE_V;

        ulong *lvl0pte2 = &(lvl0[45]);
        *lvl0pte2 = PA2PTE(0x8000) | PTE_X | PTE_R | PTE_V;

        return root;
}

void printPageTable(pgtbl pagetable)
{
        if (!pagetable) {
                kprintf("Page table is NULL\r\n");
                return;
        }
        int i;
        for (i = 0; i < 512; i++)  {
                if(pagetable[i] & PTE_V) {
                        ulong pa = PTE2PA(pagetable[i]);


                        kprintf("Entry %d: PA = 0x%08X ", i, (uint32_t)pa);

                        if (pagetable[i] & (PTE_R | PTE_W | PTE_X)) {
                                kprintf("(Leaf: ");
                                if (pagetable[i] & PTE_R) kprintf("R");
                                if (pagetable[i] & PTE_W) kprintf("W");
                                if (pagetable[i] & PTE_X) kprintf("X");
                                kprintf(")\n\r");
                        } else {
                                kprintf("(Link)\t\t");
                                printPageTable((pgtbl)pa);
                        }
                }
        }
        /*
        * TODO: Write a function that prints out the page table.
        * Your function should print out all *valid* page table entries in
        * the page table.  If any of the entries are a link (if the
        * Read/Write/Execute bits aren't set), recursively print that page
        * table.  If it is a leaf, print the page table entry and the
        * physical address is maps to.
        */
}

/**
 * testcases - called after initialization completes to test things.
 */
void userfunc(void) {
    while (1) {
        user_yield(); // keep it alive
    }
}
void testcases(void)
{
                uchar c;
        
                kprintf("===TEST BEGIN===\r\n");
        
                // TODO: Test your operating system!
        
                c = kgetc();
                switch (c)
                {
                case '0':
                {
                    kprintf("Test 0: Create a user process and print its page table\r\n");
                
                    // Create the user process
                    pid_typ newpid = create((void *)userfunc, INITSTK, PRIORITY_LOW, "UserProc", 0);
                    ready(newpid, RESCHED_NO);
                
                    // Print the page table
                    pgtbl userpt = proctab[newpid].pagetable;
                    printPageTable(userpt);
                
                    break;
                }
                case '1':
                {
                    kprintf("Test 1: User process attempting to access kernel memory\r\n");
                
                
                    void illegalAccess(void) {
                        ulong *kernel_ptr = (ulong *)0x00000000;
                        ulong val = *kernel_ptr;
                        (void)val;
                        user_yield();
                    }
                
                    pid_typ pid = create((void *)illegalAccess, INITSTK, PRIORITY_LOW, "IllegalUser", 0);
                    ready(pid, RESCHED_NO);
                    break;
                }

                case '2':
                        // TODO: Write a testcase that demonstrates a user
                        // process can read kernel variables but cannot write
                        // to them
                        break;
                case '3':
                        // TODO: Extra credit! Add handling in xtrap to detect
                        // and print out a Null Pointer Exception.  Write a
                        // testcase that demonstrates your OS can detect a
                        // Null Pointer Exception.
                        break;
                default:
                        break;
        }

        kprintf("\r\n===TEST END===\r\n");
        return;
}
