/* sbFreeBlock.c - sbFreeBlock */
/* Copyright (C) 2008, Marquette University.  All rights reserved. */
/*                                                                 */
/* Modified by                                                     */
/*                                                                 */
/* and                                                             */
/*                                                                 */
/*                                                                 */

#include <xinu.h>

/*------------------------------------------------------------------------
 * sbFreeBlock - Add a block back into the free list of disk blocks.
 *------------------------------------------------------------------------
 */
devcall sbFreeBlock(struct superblock *psuper, int block)
{
int diskfd;
struct dentry *phw;

//errorcheck if superblock is null
if (psuper == NULL) {
        return SYSERR;
}

phw = psuper->sb_disk;

//errorcheck != null
if (phw == NULL) {
        return SYSERR;
}

//error check block we got as a param (! <= 0 || ! > total blocks on disk)
if (block <= 0 || block >= DISKBLOCKTOTAL) {
        return SYSERR;
}

//diskfd = phw – devtab;

wait(psuper->sb_freelock);


//first collector node

struct fbcnode *fbc = psuper->sb_freelst;


//Case: if the disk is completely full

//free up 1 block, make it a collector node
if (fbc == NULL) {
        fbc = (struct fbcnode *)malloc(sizeof(struct fbcnode));
        if (fbc == NULL) {
                signal(psuper->sb_freelock);
                return SYSERR;
        }
        fbc->fbc_blocknum = block;
        fbc->fbc_count = 0;
        fbc->fbc_next = NULL;
        psuper->sb_freelst = fbc;
}

        // Case 2: Traverse to the last freelist node
        while (fbc->fbc_next != NULL)
        {
            fbc = fbc->fbc_next;
        }

        // Case 3: If freelist node is full, create a new node
        if (fbc->fbc_count >= FREEBLOCKMAX){
            struct fbcnode *newfbc = (struct fbcnode *)malloc(sizeof(struct fbcnode));
            if (NULL == newfbc)  {
                signal(psuper->sb_freelock);
                return SYSERR;
            }

            newfbc->fbc_blocknum = block;
            newfbc->fbc_count = 0;
            newfbc->fbc_next = NULL;

            fbc->fbc_next = newfbc; // Link it
            fbc = newfbc; // move pointer


        } else {
            fbc->fbc_free[fbc->fbc_count] = block;
            fbc->fbc_count++;



    // Swizzle the next pointer
    if (NULL == fbc->fbc_next) {
        fbc->fbc_free[FREEBLOCKMAX] = 0;
    } else {
        fbc->fbc_free[FREEBLOCKMAX] = fbc->fbc_next->fbc_blocknum;
    }

    // Now seek to the block number where this fbcnode should be saved
    if (SYSERR == diskSeek(phw, fbc->fbc_blocknum)) {
        signal(psuper->sb_freelock);
        return SYSERR;
    }

    if (SYSERR == diskWrite(phw, (char *)fbc, sizeof(struct fbcnode))) {
        signal(psuper->sb_freelock);
        return SYSERR;
    }

    signal(psuper->sb_freelock);
    return OK;
    }
}
//Case: the free block collector node is completely full or completely empty

//Create new free block collector node, add to the first spot in it


//Case: add to the next available index in collector node

//put our block into the next spot in the array

//write this information to the disk


//Swizzle function




//if collector node == NULL

//collector node fbc_next = 0;

//else

//collector node’s next = next’s block num


//seek

//write



    // TODO: Add the block back into the filesystem's list of
    //  free blocks.  Use the superblock's locks to guarantee
    //  mutually exclusive access to the free list, and write
    //  the changed free list segment(s) back to disk.
